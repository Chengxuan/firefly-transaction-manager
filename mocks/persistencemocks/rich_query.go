// Code generated by mockery v2.26.1. DO NOT EDIT.

package persistencemocks

import (
	context "context"

	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	ffapi "github.com/hyperledger/firefly-common/pkg/ffapi"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// RichQuery is an autogenerated mock type for the RichQuery type
type RichQuery struct {
	mock.Mock
}

// ListListeners provides a mock function with given fields: ctx, filter
func (_m *RichQuery) ListListeners(ctx context.Context, filter ffapi.Filter) ([]*apitypes.Listener, *ffapi.FilterResult, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*apitypes.Listener
	var r1 *ffapi.FilterResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ffapi.Filter) ([]*apitypes.Listener, *ffapi.FilterResult, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ffapi.Filter) []*apitypes.Listener); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ffapi.Filter) *ffapi.FilterResult); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ffapi.FilterResult)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, ffapi.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListStreamListeners provides a mock function with given fields: ctx, streamID, filter
func (_m *RichQuery) ListStreamListeners(ctx context.Context, streamID *fftypes.UUID, filter ffapi.Filter) ([]*apitypes.Listener, *ffapi.FilterResult, error) {
	ret := _m.Called(ctx, streamID, filter)

	var r0 []*apitypes.Listener
	var r1 *ffapi.FilterResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, ffapi.Filter) ([]*apitypes.Listener, *ffapi.FilterResult, error)); ok {
		return rf(ctx, streamID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, ffapi.Filter) []*apitypes.Listener); ok {
		r0 = rf(ctx, streamID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.UUID, ffapi.Filter) *ffapi.FilterResult); ok {
		r1 = rf(ctx, streamID, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ffapi.FilterResult)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *fftypes.UUID, ffapi.Filter) error); ok {
		r2 = rf(ctx, streamID, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListStreams provides a mock function with given fields: ctx, filter
func (_m *RichQuery) ListStreams(ctx context.Context, filter ffapi.Filter) ([]*apitypes.EventStream, *ffapi.FilterResult, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*apitypes.EventStream
	var r1 *ffapi.FilterResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ffapi.Filter) ([]*apitypes.EventStream, *ffapi.FilterResult, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ffapi.Filter) []*apitypes.EventStream); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.EventStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ffapi.Filter) *ffapi.FilterResult); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ffapi.FilterResult)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, ffapi.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactions provides a mock function with given fields: ctx, filter
func (_m *RichQuery) ListTransactions(ctx context.Context, filter ffapi.Filter) ([]*apitypes.ManagedTX, *ffapi.FilterResult, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*apitypes.ManagedTX
	var r1 *ffapi.FilterResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ffapi.Filter) ([]*apitypes.ManagedTX, *ffapi.FilterResult, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ffapi.Filter) []*apitypes.ManagedTX); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ffapi.Filter) *ffapi.FilterResult); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ffapi.FilterResult)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, ffapi.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewRichQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewRichQuery creates a new instance of RichQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRichQuery(t mockConstructorTestingTNewRichQuery) *RichQuery {
	mock := &RichQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
