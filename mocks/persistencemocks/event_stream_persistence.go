// Code generated by mockery v1.0.0. DO NOT EDIT.

package persistencemocks

import (
	context "context"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"
	mock "github.com/stretchr/testify/mock"

	persistence "github.com/hyperledger/firefly-transaction-manager/internal/persistence"
)

// EventStreamPersistence is an autogenerated mock type for the EventStreamPersistence type
type EventStreamPersistence struct {
	mock.Mock
}

// DeleteCheckpoint provides a mock function with given fields: ctx, streamID
func (_m *EventStreamPersistence) DeleteCheckpoint(ctx context.Context, streamID *fftypes.UUID) error {
	ret := _m.Called(ctx, streamID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) error); ok {
		r0 = rf(ctx, streamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadCheckpoint provides a mock function with given fields: ctx, streamID
func (_m *EventStreamPersistence) ReadCheckpoint(ctx context.Context, streamID *fftypes.UUID) (*persistence.EventStreamCheckpoint, error) {
	ret := _m.Called(ctx, streamID)

	var r0 *persistence.EventStreamCheckpoint
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) *persistence.EventStreamCheckpoint); ok {
		r0 = rf(ctx, streamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.EventStreamCheckpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.UUID) error); ok {
		r1 = rf(ctx, streamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCheckpoint provides a mock function with given fields: ctx, checkpoint
func (_m *EventStreamPersistence) StoreCheckpoint(ctx context.Context, checkpoint *persistence.EventStreamCheckpoint) error {
	ret := _m.Called(ctx, checkpoint)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *persistence.EventStreamCheckpoint) error); ok {
		r0 = rf(ctx, checkpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
